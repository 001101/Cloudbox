---
- block:
  - name: "Check {{backup.dest}} exists"
    stat:
      path: "{{backup.dest}}"
    register: backup_location

  - name: "Create backup location {{backup.dest}}"
    file: 
      path: "{{backup.dest}}"
      state: directory
      mode: 0775
      owner: "{{user}}"
      group: "{{user}}"
      recurse: true
    when: backup_location.stat.exists == False

  - name: "Check if backup.lock is present"
    stat:
      path: "{{playbook_dir}}/backup.lock"
    register: backup_lock

  - name: "Fail when backup.lock exists"
    fail:
      msg: "Backup is already in progress..."
    when: backup_lock.stat.exists

  - name: "Create backup.lock"
    file:
      path: "{{playbook_dir}}/backup.lock"
      state: touch
      owner: "{{user}}"
      group: "{{user}}"
    when: backup_lock.stat.exists == False

  - name: "Check {{backup.dest}}/cloudbox.tar exists"
    stat:
      path: "{{backup.dest}}/cloudbox.tar"
    register: backup_previous_tgz

  - name: "Copying cloudbox.tar to cloudbox.tar.backup"
    copy:
      src: "{{backup.dest}}/cloudbox.tar"
      dest: "{{backup.dest}}/cloudbox.tar.backup"
      force: yes
      group: "{{user}}"
      owner: "{{user}}"
    when: backup_previous_tgz.stat.exists

  - name: "Remove previous cloudbox.tar"
    file:
      path: "{{backup.dest}}/cloudbox.tar"
      state: absent
    when: backup_previous_tgz.stat.exists

  - name: "Copy settings.xml to {{mnt.docker_data}} for inclusion in backup"
    copy:
      src: "{{playbook_dir}}/settings.yml"
      dest: "{{mnt.docker_data}}/settings.yml"
      force: yes
      group: "{{user}}"
      owner: "{{user}}"
      mode: 0775

  - name: "Stop Plex"
    docker_container:
      name: plex
      state: stopped
    when: backup.stop_plex

  - name: "Archiving {{mnt.docker_data}} to {{backup.dest}}/cloudbox.tar"
    shell: "tar -cf '{{backup.dest}}/cloudbox.tar' -C {{mnt.docker_data}} ."

  - name: "Start Plex"
    docker_container:
      name: plex
      state: started
    when: backup.stop_plex

  - name: "Wait for 10 seconds before uploads"
    wait_for:
      timeout: 10
  
  - name: "Upload backups with rclone to {{backup.rclone_dest}}"
    command: "rclone copy '{{backup.dest}}' '{{backup.rclone_dest}}' --stats=30s -v --transfers=2 --log-file='/home/{{user}}/backup_rclone.log'"
    become: true
    become_user: "{{user}}"
    when: backup.use_rclone

  - name: "Upload backups with rsync to {{backup.rsync_dest}}"
    synchronize:
      src: "{{backup.dest}}/"
      dest: "{{backup.rsync_dest}}/"
      rsync_opts:
        - "--log-file='/home/{{user}}/backup_rsync.log'"
    become: true
    become_user: "{{user}}"
    when: backup.use_rsync

  - name: "Schedule cron backup for state: {{backup.cron_state}}, when: {{backup.cron_time}}"
    cron:
      name: "Backup Cloudbox"
      special_time: "{{backup.cron_time}}"
      job: "ansible-playbook {{playbook_dir}}/cloudbox.yml --tags backup"
      state: "{{backup.cron_state}}"

  always:
  - debug: msg="Finished backup"
    when: backup_lock.stat.exists == False

  - name: "Remove backup.lock"
    file:
      path: "{{playbook_dir}}/backup.lock"
      state: absent
    when: backup_lock.stat.exists == False
