---
- name: Fail when no backup provider has been turned on
  fail: msg="You must set atleast one backup.use_* option in order to perform a restore"
  when: backup.use_rclone == False and backup.use_rsync == False

- name: "Check {{backup.tgz_dest}} exists"
  stat:
    path: "{{backup.tgz_dest}}"
  register: backup_location

- name: "Create backup location {{backup.tgz_dest}}"
  file: path={{backup.tgz_dest}} state=directory mode=0775 owner={{user}} group={{user}} recurse=true
  when: backup_location.stat.exists == False

- name: Ensure unzip is installed
  apt:
    name: unzip
    state: installed
    
- name: Check rclone.conf exists
  stat:
    path: "{{playbook_dir}}/rclone.conf"
  register: rclone_conf

- name: Check rclone installed
  stat:
    path: "/opt/rclone/rclone"
  register: rclone_bin

- name: Install rclone
  include_role:
    name: rclone
  when: backup.use_rclone and rclone_bin.stat.exists == False and rclone_conf.stat.exists

- name: Fail because no rclone and no rclone.conf
  fail: msg="rclone was not installed and there was no rclone.conf in the same path as cloudbox.yml, so could not install rclone automatically..."
  when: backup.use_rclone and rclone_bin.stat.exists == False and rclone_conf.stat.exists == False

- name: "Fetch cloudbox.tgz from {{backup.rclone_dest}}"
  command: "rclone copy '{{backup.rclone_dest}}/cloudbox.tgz' '{{backup.tgz_dest}}' --stats=30s -v --transfers=2 --log-file='{{playbook_dir}}/restore_rclone.log'"
  become: true
  become_user: "{{user}}"
  when: (backup.use_rclone and backup.use_rsync) or (backup.use_rclone and backup.use_rsync == False)

- name: "Fetch cloudbox.tgz from {{backup.rsync_dest}}"
  synchronize:
    src: "{{backup.rsync_dest}}/cloudbox.tgz"
    dest: "{{backup.tgz_dest}}/"
    rsync_opts:
      - "--log-file='{{playbook_dir}}/restore_rsync.log'"
  become: true
  become_user: "{{user}}"
  when: backup.use_rclone == False and backup.use_rsync

- name: "Check cloudbox.tgz exists"
  stat:
    path: "{{backup.tgz_dest}}/cloudbox.tgz"
  register: cloudbox_tgz

- name: "Fail cloudbox.tgz doesnt exist"
  fail: msg="There must have been an issue retrieving the cloudbox.tgz file... as it does not exist at {{backup.tgz_dest}}/cloudbox.tgz"
  when: cloudbox_tgz.stat.exists == False

- name: "Unarchive cloudbox.tgz to /opt"
  unarchive:
    src: "{{backup.tgz_dest}}/cloudbox.tgz"
    path: /opt
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775

- debug:
    msg: Finished unarchiving cloudbox.tgz to /opt, you should now be ready to perform an installation!
