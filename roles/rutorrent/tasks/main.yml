---
- name: Stop and remove any existing container
  docker_container:
    name: rutorrent
    state: absent

- name: Check rtorrent.rc exists
  stat:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
  register: rtorrent_rc

- name: Create and start container
  docker_container:
    name: rutorrent
    image: linuxserver/rutorrent
    published_ports:
      - "127.0.0.1:3111:80"
      - "51413:51413"
      - "6881:6881/udp"
    env:
      PUID: "{{uid.stdout}}"
      PGID: "{{gid.stdout}}"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "/opt/rutorrent:/config"
      - "{{rutorrent.downloads}}:/downloads/rutorrent"
    networks:
      - name: cloudbox
        aliases:
          - rutorrent
    labels:
      traefik.port: "80"
    restart_policy: always
    state: started

- name: Wait for rtorrent.rc to be created
  wait_for:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Wait for nginx.conf to be created
  wait_for:
    path: "/opt/rutorrent/nginx/nginx.conf"
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Stop container to customize rtorrent.rc
  docker_container:
    name: rutorrent
    state: stopped
  when: rtorrent_rc.stat.exists == False

- name: Change downloads directory
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^directory\s?='
    line: 'directory = /downloads/rutorrent'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Disable DHT
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^dht\s?='
    line: 'dht = disable'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Disable PEX
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^peer_exchange\s?='
    line: 'peer_exchange = no'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Reduce min_peers
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^min_peers\s?='
    line: 'min_peers = 1'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Increase max_uploads
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^max_uploads\s?='
    line: 'max_uploads = 1024'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Disable check_hash
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^check_hash\s?='
    line: 'check_hash = no'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Set upload_rate to unlimited
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^upload_rate\s?='
    line: 'upload_rate = 0'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Set download_rate to unlimited
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^download_rate\s?='
    line: 'download_rate = 0'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Set encryption parameters
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^encryption\s?='
    line: 'encryption = allow_incoming,enable_retry,prefer_plaintext'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Copy across custom nginx.conf with htpasswd support
  copy:
    src: nginx.conf
    dest: /opt/rutorrent/nginx/nginx.conf
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
    force: yes
  when: rtorrent_rc.stat.exists == False

- name: Create htpasswd
  htpasswd:
    path: /opt/rutorrent/nginx/.htpasswd
    name: "{{rutorrent.user}}"
    password: "{{rutorrent.passwd}}"
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
  when: rtorrent_rc.stat.exists == False

- name: Start container to apply changes
  docker_container:
    name: rutorrent
    state: started
  when: rtorrent_rc.stat.exists == False
